#!/bin/bash
#150503 step: see https://github.com/step-/nathans-wallpaper/

# Fatdog64 - PINBOARD_FILE is set in /usr/sbin/fatdog-drive-icon*.sh
PINBOARD_FILE=$HOME/.config/rox.sourceforge.net/ROX-Filer/PuppyPin

# Determine the path to this application.
APPDIR=${0%/*}; APPDIR=`cd "$APPDIR";pwd`
export APPDIR # to $BG_DLG

DEBUG=${DEBUG:-} # unset to disable debug trace to stderr; set verbosity (integer) 1-3

# setup working space
export USRDIR=$HOME/.config/wallpaper
mkdir -p "${USRDIR}"
PREFS="${USRDIR}/preferences"
[ ! -f $PREFS ] && touch $PREFS
. $PREFS
[ "$INT" ] || echo 'INT="15"' >> $PREFS
[ "$SLIDEDIR" ] || echo 'SLIDEDIR="/usr/share/backgrounds"' >> $PREFS
[ "$VIEWER" ] || echo 'VIEWER="defaultimageviewer"' >> $PREFS
[ "$CACHEROOT" ] || echo 'CACHEROOT="$HOME/.cache/wallpaper"' >> $PREFS
if [ "$FATDOG_STATE_DIR" ]; then
  [ "$FILER" ] || echo 'FILER="rox"' >> $PREFS
  [ "$IMGEDITOR" ] || echo 'IMGEDITOR="defaultpaint"' >> $PREFS
else
  [ "$FILER" ] || echo 'FILER="defaultfilemanager"' >> $PREFS
  [ "$IMGEDITOR" ] || echo 'IMGEDITOR="defaultimageeditor"' >> $PREFS
fi
. $PREFS
export CACHEROOT

#LANG=de_DE.UTF-8 # full example
case "${LANG}" in
        da*)	export LANGUAGE="danish" ;;
        de*)	export LANGUAGE="german" ;;
        en*)	export LANGUAGE="english" ;;
        es*)	export LANGUAGE="spanish" ;;
        fi*)	export LANGUAGE="finnish" ;;
        fr*)	export LANGUAGE="french" ;;
        it*)	export LANGUAGE="italian" ;;
        ja*)	export LANGUAGE="japanese" ;;
        nb*)	export LANGUAGE="norwegian" ;; #translation is norwegian bokmål
        nl*)	export LANGUAGE="dutch" ;;
        nn*)	export LANGUAGE="norwegian" ;; #Use norwegian bokmål, since there is no norwegian nynorsk
        ru*)	export LANGUAGE="russian" ;;
        se*)	export LANGUAGE="swedish" ;;
        *)	export LANGUAGE="english" ;; #english for contries without translation
esac
. "$APPDIR/locale/english.po" #always run to fill gaps in translation
[ -f "$APPDIR/locale/${LANGUAGE}.po" ] && . "$APPDIR/locale/${LANGUAGE}.po" 2>&-

#just some insurance 110905
#need at least gtkdialog-0.7.21
if gtkdialog3 -v|awk '/version /{split($3,a,".");exit(a[2]>7||a[3]>20)}'; then
  if ! which gtkdialog4 >/dev/null 2>&1; then
    xdialog -center "$LOC_UPGRADE_GTKDIALOG"
    exit 1
  else
    export GTKDIALOG=gtkdialog4
  fi
else
  export GTKDIALOG=gtkdialog3
fi

dialog_ok_cancel() # $1-prompt [$2-button1_label'~~~'('no-cancel'|button2_label)] #{{{
{
#|set +x
#|echo >&2 "
#|---------- dialog_ok_cancel"
#|set -x
  # return 1 to stay in main window
  local label_ok label_cancel button_cancel
  case "$2" in
    *~~~*)
      label_ok='><label>"   '"${2%~~~*}"'   "</label>'
      label_cancel='><label>"   '"${2#*~~~}"'   "</label>'
    ;;
    *)
      label_ok=' label="gtk-ok">'
      label_cancel=' label="gtk-cancel">'
  esac
  case "$2" in
    *no-cancel*) :
    ;;
    *) button_cancel='
   <button use-stock="true"'"${label_cancel}"'
    <action>EXIT:cancel</action>
   </button>'
  esac
# Enter key is equivalent to clicking OK, refer topic "Press 'Enter' instead of"
# http://murga-linux.com/puppy/viewtopic.php?t=38608
# ESC key cancels, topics "Hotkeys" and "Hotkey", same thread.
  eval $(${GTKDIALOG} --center --stdin << EOF
<window title="$LOC_MAIN" image-name="$APPDIR/DirIcon16.png">
 <vbox>
  <vbox border-width="10">
   <text>
    <label>$1</label>
   </text>
  </vbox>
  <hseparator></hseparator>
  <hbox homogeneous="true">
   <button can-default="true" has-default="true" use-stock="true"${label_ok}
    <action>EXIT:ok</action>
   </button>
   ${button_cancel}
  </hbox>
 </vbox>
 <action signal="key-press-event" condition="command_is_true([ \${KEY_RAW} = 0x9 ] && echo true)">EXIT:escape</action>
</window>
EOF
  )
  [ ok = "${EXIT}" ]
}
export -f dialog_ok_cancel # bash
#}}}
# We depend on a ROX-Filer process to be already running for $USER, so
# rox RPC and folder ~/.icons/ROX can work smootly and leave no hanging
# processes.
if ! pgrep -u $USER ROX-Filer >/dev/null 2>&1; then
  dialog_ok_cancel "$LOC_ROX_NOT_RUNNING" "$LOC_QUIT~~~no-cancel"
  exit 1
fi

get_current_background() # $1-option #{{{
# Emit background_mode \n background_path
# Mode is output as UK-spelling infinitive verb as 'rox --RPC' expects
{
  # --from-ROX  return data from the most recent rox pinboard file (2 lines) - see CAVEAT-2 below
  # --from-ROX2 return data from both rox pinboard files (4 lines)
#|set +x
#|echo "
#|------------ get_current_background" >&2
#|(
#|set -x
  case $1 in
    --from-ROX*) : ;;
    *)
      # CAVEAT-1: on startup backgroundmode may not match PuppyPin's
      # current style
      local m i
      m="$USRDIR/backgroundmode" i="$USRDIR/bg_img"
      [ -s "$m" ] && cat "$m" || echo ""
      [ -s "$i" ] && cat "$i" || echo ""
      return
      ;;
  esac
  # CAVEAT-2: Unfortunately, for historical compatibility reasons, this
  # script still writes two different pinboard files, when most likely
  # just one could suffice.  So --from-ROX returns the data of the most
  # recent file between PuppyPin and pb_default. This is a weak spot, as
  # data taken from one file could not match data taken from the other
  # one, under some circumstances.  Instead --from-ROX2 returns data
  # from both PuppyPin and pb_default, with the most recent data first.
  # Eventually, there should be only one pinboard file, PuppyPin, but
  # it's unlikely to happen anytime soon.

  local A Z # A is the most recent
  local pf=$PINBOARD_FILE
  local pb="${PINBOARD_FILE%/*}/pb_default"
  [ -f "${pb}" -a "${pf}" -ot "${pb}" ] && A=$pb Z=$pf || A=$pf Z=$pb
  ! [ -f "$A" ] && A=/dev/null; ! [ -f "$Z" ] && Z=/dev/null
  local script
  script='
  #ex.   <backdrop style="Stretched">/path/to/file.ext</backdrop>
  /<backdrop[ >]/ {
    split($0, a, /[<>]/)
    path = a[3]
    split(a[2], b, /"/)
    style = b[2] # Stretched, Centre, Centred, Centered, etc.
    # convert to UK-spelling infinitive verb for rox --RPC
    if(style ~ /Scale.*/) style="Scale"
    else if(style ~ /Tile.*/) style="Tile"
    else if(style ~ /Stretch.*/) style="Stretch"
    else style="Centre"
    a_style[FILENAME] = style
    a_path[FILENAME] = path
  }
  END {
    for(i = 1; i < ARGC; i++) {
      printf "%s\n%s\n", a_style[ARGV[i]], a_path[ARGV[i]]
    }
  }
  '
  case $1 in
    --from-ROX)  awk "$script" "$A" ;;
    --from-ROX2) awk "$script" "$A" "$Z" ;;
  esac
#|)
}
export -f get_current_background # bash
#}}}
# What is the old background?
#historical note: grafpup uses pinboard #$HOME/.config/rox.sourceforge.net/ROX-Filer/pb_default
#historical note: puppy 4.1.2 uses $HOME/Choices/ROX-Filer/PuppyPin
{ read OLDMODE; read OLDIMAGE; } <<EOF
  $(get_current_background --from-ROX)
EOF
OLDMODE=${OLDMODE:-Centre} # Most sensible catchall

# step 20150503
# preview widget image (symlink for .jpgs, regular file otherwise)
  #keep compatible with: "#show image #20110624 01micko, requires new gtkdialog"
export PREVIEWIMG=/tmp/$USER-current_wallpaper_selection.jpg
# stretched wallpaper path container (Stretch mode)
  #keep compatible with Quirky: "#140101 background_reshape has changed..."
export STRETCHEDWPC=/tmp/$USER-qwallpaper_reshaped
# new preview icons, info $APPDIR/source.txt
export FOLDERPREVIEW=${APPDIR}/folder.jpg
export NOIMAGEPREVIEW=${APPDIR}/no-image.jpg

# if run with an image file or an option as an argument
if [ "$#" -eq 1 ];then
 case $1 in
  -play|-play=*|-play-list=*)
   [ -f $HOME/.config/sessionrc ] && . $HOME/.config/sessionrc
   [ -f "${USRDIR}/preferences" ] && . "${USRDIR}/preferences"
   case $1 in
     -play-list=*) exec "${APPDIR}/slideshow" -start-list "${1#*=}" ;;
     -play=*) thismode=${1#*=} ;;
     *) thismode=${OLDMODE} ;;
   esac
   exec "$APPDIR/slideshow" -start "${thismode}:${SLIDEDIR:-/usr/share/backgrounds}"
  ;;
  -stop)
   exec "$APPDIR/slideshow" -stop
  ;;
  -about)
   exec "$APPDIR/functions" -about
  ;;
  *) # We get here when wallslide runs AppRun to play a slideshow image.
   # or when user runs /usr/bin/wallpaper /path/to/image/file.ext.
   # Note: we don't test is_supported_image $1 on purpose, to give some
   # leeway to a slideshow of symbolically linked images (hidden feature).

   # $1 can be specified as [this-mode':']image-file-path
   case $1 in
     *:*) thismode=${1%:*}; ifp=${1#*:} ;;
     *) thismode=${OLDMODE}; ifp=$1 ;;
   esac

   # For dialog_change_revert and on_signal.
   echo "${thismode} ${ifp}" > "${USRDIR}/bg_changed"
#|echo >&2 "======== AppRun slideshow ${thismode} ${ifp}" \> "${USRDIR}/bg_changed"

   if which fixwidgets >&- 2>&-; then
     echo "${ifp}" > "${USRDIR}/bg_img"
     fixwidgets -wallpaper_setter
     # UNTESTED
   else
     # We will try to remove $cached after setting the new wallpaper.
     { read x1; read cached1; read x2; read cached2; } << EOF
$(get_current_background --from-ROX2)
EOF
     : BEFORE
     : "cached1=($x1${x1:+:}$cached1) cached2=($x2${x2:+:}cached2)"
     case ${cached1%/*} in "$CACHEROOT"/*) : ;; *) cached1= ;; esac
     case ${cached2%/*} in "$CACHEROOT"/*) : ;; *) cached2= ;; esac
     # OK, let's set the wallpaper.
     # "${thismode}:" allows changing mode while a slideshow is playing.
     error_in_set_bg=
     DEBUG=${DEBUG:-} \
     SCALE_FILTER=${SCALE_FILTER:-hermite} \
     "${APPDIR}/set_bg" "${thismode}:${ifp}" || error_in_set_bg=1
     # Note: "set_bg return 0" does not imply that the new image was set.
   fi
   # The new image should be set. We are about to exit.  Tidy up by
   # removing $STRETCHEDWPC, which script background_reshape creates,
   # and $cached[12], cached copies of the previous stretched wallpaper.
   # This keeps the slideshow from filling $CACHEROOT with copies of all
   # images in the playlist (Stretch mode only).
#|set +x
#|echo >&2 "
#|---------- AppRun $(date)"
#|set -x
   if [ -z "$error_in_set_bg" -a \( -f "$cached1" -o -f "$cached2" \) ]; then
     # Before removing $cached[12], we make sure it isn't the current
     # PuppyPin(board) image - it could be if set_bg failed, and
     # possibly in some other corner cases.
     sleep .3 # enough time for set_bg to complete its RPC with rox.
     { read x1; read rox1; read x2; read rox2; } << EOF
$(get_current_background --from-ROX2)
EOF
     : AFTER
     : "rox1=($x1${x1:+:}$rox1) rox2=($x1${x1:+:}$rox2)"
     : "cached1=($cached1) cached2=($cached2)"
     [ "$rox1" != "$cached1" -a "$rox2" != "$cached1" ] && rm -f "$cached1"
     [ "$rox1" != "$cached2" -a "$rox2" != "$cached2" ] && rm -f "$cached2"
   fi
   rm -f "$STRETCHEDWPC"
   exit $error_in_set_bg # return 0 doesn't imply that the new bg was set
  ;;
 esac
elif [ "$#" -gt 1 ]; then
 # slideshow from multiple image path arguments
 "${APPDIR}/slideshow" -stop
 [ -f $HOME/.config/sessionrc ] && . $HOME/.config/sessionrc
 [ -f "${USRDIR}/preferences" ] && . "${USRDIR}/preferences"
 for arg; do echo "${arg}"; done > /tmp/$USER-wallpaper-slide
 exec "${APPDIR}/slideshow" -start-list /tmp/$USER-wallpaper-slide
fi

echo $OLDMODE > "${USRDIR}/backgroundmode" # ROX is displaying this mode
echo "${OLDIMAGE}" > "${USRDIR}/bg_img"

# Save initial background to be restored on exiting w/o Apply
# (don't move this line before slideshow processing)
echo "${OLDMODE} ${OLDIMAGE}" > "${USRDIR}/restore" # on Exit w/o Apply

# Radio buttons
get_loc_mode_label() # $1-mode
{
#|set +x
#|>&2 echo "
#|---------- get_loc_mode_label $1"
#|set -x
  case $1 in
    Stretch*) echo "${LOC_STRETCH} ${LOC_STRETCH_TOOLTIP}";;
    Distort*) echo "${LOC_DISTORT} ${LOC_DISTORT_TOOLTIP}";;
    Tile*) echo "${LOC_TILE} ${LOC_TILE_TOOLTIP}";;
    Scale*) echo "${LOC_SCALE} ${LOC_SCALE_TOOLTIP}";;
    Fit*) echo "${LOC_FIT} ${LOC_FIT_TOOLTIP}";;
    Centre*|Center*) echo "${LOC_CENTRE} ${LOC_CENTRE_TOOLTIP}";;
    *) echo "Centre" # Most sensible catchall -- but it shouldn't happen
  esac
#|set +x
}
export -f get_loc_mode_label # bash

make_mode_button() # $1-mode $1-old-mode
{
#|set -x
#|: -------- make_mode_button $*
  local label tooltip match= mode=$1 oldmode=$2
  read label tooltip <<EOF
  $(get_loc_mode_label "${mode}")
EOF
#  # fuzzily comparing oldmode == mode
#  case ${oldmode} in
#    Tile*) case ${mode} in Tile*) match=1 ;; esac ;;
#    Scale*) case ${mode} in Scale*) match=1 ;; esac ;;
#    Stretch*) case ${mode} in Stretch*) match=1 ;; esac ;;
#    Center*|Centre*) case ${mode} in Center*|Centre*) match=1 ;; esac ;;
#  esac
[ "${oldmode}" = "${mode}" ] && match=1 # is the active radio button
  echo "<radiobutton ${match:+active=\"true\"} tooltip-text=\"${tooltip}\">
 <label>${label}</label>
 <variable>RADIO${mode}</variable>
 <output file>/tmp/$USER-wallpaper-radio-$1</output>
 <action>save:RADIO${mode}</action>
 <action>if true trigger_mode_button \"${mode}\" \$LIVE</action>
 <action>if true refresh:STATUSBAR</action>
</radiobutton>"
  if [ -n "${match}" ]; then
    echo true > "/tmp/$USER-wallpaper-radio-${mode}"
  else
    rm -f "/tmp/$USER-wallpaper-radio-${mode}"
  fi
#|set +x
}

get_mode_button() # output currently active button name (= enabled mode)
{
  set +f
  # Theory of operation: in make_mode_button() notice that each RADIO${mode}
  # button auto-saves its state (true/false) to /tmp/$USER-wallpaper-radio-${mode}:
  # return the name of the button whose state==true.
  grep -lF true /tmp/$USER-wallpaper-radio-* 2>/dev/null | cut -d- -f4
}
export -f get_mode_button # bash

trigger_mode_button() # $1-mode|'read' $2-LIVE('true'|'false')
{
[ "${DEBUG:-0}" -gt 1 ] && set -x
: -------- trigger_mode_button $*
  #"${APPDIR}/slideshow" -stop
  local cwd=${PWD} # bash
  local mode live_mode=$2
  if is_supported_image "${IMAGE}" && cd "${USRDIR}"; then
    if [ read = "$1" ]; then
      : read mode < backgroundmode # special case, not currently used
    else # common case: begin updating...
      echo "$1" > backgroundmode
    fi &&
    if [ true = "${live_mode}" ]; then
      #20150620- (let set_bg handle bg_img)# echo "${IMAGE}" > bg_img
      # set_bg eventually calls rox to change pinboard background.
      DEBUG=${DEBUG:-} \
      SCALE_FILTER=${SCALE_FILTER:-hermite} \
      "${APPDIR}/set_bg" "${IMAGE}" &&
        touch bg_changed # just touch! for dialog_change_revert and on_signal
    fi
  fi
  cd "${cwd}"
[ "${DEBUG}" ] && set +x
}
export -f trigger_mode_button # bash

CENTREBUTTON=$(make_mode_button Centre $OLDMODE)
TILEBUTTON=$(make_mode_button Tile $OLDMODE)
SCALEBUTTON=$(make_mode_button Scale $OLDMODE)
FITBUTTON=$(make_mode_button Fit $OLDMODE)
STRETCHBUTTON=$(make_mode_button Stretch $OLDMODE)
DISTORTBUTTON=$(make_mode_button Distort $OLDMODE)
RADIOBUTTONS="$CENTREBUTTON
$TILEBUTTON
$SCALEBUTTON
$FITBUTTON
$STRETCHBUTTON
$DISTORTBUTTON"

#20150503 Superseded by using <radiobutton active="true"> in make_mode_button()
: << \IGNORED
case $OLDMODE in
 Tile*)
 RADIOBUTTONS="$TILEBUTTON
 $CENTREBUTTON
 $SCALEBUTTON
 $STRETCHBUTTON"
 ;;
 Scale*)
 RADIOBUTTONS="$SCALEBUTTON
 $CENTREBUTTON
 $TILEBUTTON
 $STRETCHBUTTON"
 ;;
 Stretch*)
 RADIOBUTTONS="$STRETCHBUTTON
 $CENTREBUTTON
 $TILEBUTTON
 $SCALEBUTTON"
 ;;
 Center*|Centre*|*) # Catchall
 RADIOBUTTONS="$CENTREBUTTON
 $TILEBUTTON
 $SCALEBUTTON
 $STRETCHBUTTON"
 ;;
esac
IGNORED

# Determine which image source directory to list.
case "${OLDIMAGE}" in
 "")
  OLDIMAGE="[none]"
  DIR=$SLIDEDIR
 ;;
 /usr/share/backgrounds/.[0-9][0-9][0-9]/*|"$CACHEROOT"/.[0-9][0-9][0-9]/*)
   # /usr/share/background included to catch legacy ISO masters/savefiles (corner case)
  DIR=$SLIDEDIR # do not list cached aspect-ratio folders
 ;;
 *)
  DIR=${OLDIMAGE%/*}
  [ "$DIR" = "$HOME/.pwidgets" ] && DIR=$SLIDEDIR
 ;;
esac
echo "$OLDIMAGE" > "${USRDIR}/bg_img"
PREVDIR="`pwd`"

# Reset mode
echo $OLDMODE > "${USRDIR}/backgroundmode"

#add button for sidebar if installed
if [ -f $HOME/.pwidgets/pwidgetsrc ];then #icon fix 20110624, also in the main xml code for "edit" and "view"
 SIDEBAR='<button><label>Sidebar</label><input file stock="gtk-media-pause"></input><action>/usr/local/pwidgets/widgets/plugins/sidebar/sidebar &</action></button>'
fi

#show image #20110624 01micko, requires new gtkdialog
#CURRENTIMG="`cat $HOME/.config/wallpaper/bg_img`"
#ln -sf $CURRENTIMG /tmp/$USER-current_wallpaper_selection.jpg

# Supported image type gate. Implement new type here then:
# - In functions swapimagefunc, status_bar_msg
# - In scripts set_bg (i.e., BMP), background_reshape (Stretch mode)
is_supported_image() # $1-filepath
{
#|echo >&2 "
#|---------- is_supported_image $*"
#|set -x
  # IMPORTANT: image must be a regular file, no links!, no dirs, etc.
  [ -f "$1" ] || return 1
  case "$1" in
  *.jpg|*.jpeg|*.png|*.gif|*.tif|*.tiff|*.bmp|*.background|*.JPG|*.JPEG|*.PNG|*.GIF|*.TIF|*.TIFF|*.BMP|*.svg)
     return 0 ;;
  *) return 1 ;;
  esac
}
export -f is_supported_image # bash

swapimagefunc()
{
#|set +x
#|echo >&2 "
#|---------- swapimagefunc"
#|set -x
 rm -f "${PREVIEWIMG}"
 if ! is_supported_image "${IMAGE}"; then
   [ -d "${IMAGE}" ] && IMAGE="${FOLDERPREVIEW}" || IMAGE="${NOIMAGEPREVIEW}"
 fi
 local imgname=${IMAGE##*/}
 local preview="$CACHEROOT/.preview/${imgname}.jpg" # keep .jpg !
 local tojpeg="pnmtojpeg -quality=60"
 # Convert image format to jpg, which gtkdialog can display.
 # Fail silently when the conversion utility is unavailable.
 # Don't convert again if an up-to-date preview is already available;
 # see also set_bg -clear.

 # Create the preview directory (fixed path to be backwards compatible).
 previewdir="${preview%/*}"
 if ! [ -e "${previewdir}" ]; then
   if [ -L "${previewdir}" ]; then
     # Create $previewdir's target, i.e., create /tmp/$USER-wallpaper-preview
     # when link $CACHEROOT/.preview -> /tmp/$USER-wallpaper-preview
     # This can be useful on Fatdog64 and Puppies where /tmp is a RAM filesystem.
     previewdir=$(readlink "${previewdir}")
   fi
   mkdir -p "${previewdir}"
 fi
 if [ ! -f "${preview}" ] || test "${IMAGE}" -nt "${preview}"; then
  case "${imgname}" in # ignore conversion errors (close stderr)
    *.jpg|*.jpeg|*.JPG|*.JPEG) ln -sf "${IMAGE}" "${preview}" ;; # no convert
    *.png|*.PNG) pngtopnm "${IMAGE}" | $tojpeg > "${preview}" ;;
    *.gif|*.GIF) giftopnm "${IMAGE}" | $tojpeg > "${preview}" ;;
    *.tif|*.tiff|*.TIF|*.TIFF) tifftopnm "${IMAGE}" | $tojpeg > "${preview}" ;;
    *.bmp|*.BMP) bmptopnm "${IMAGE}" | $tojpeg > "${preview}" ;;
    *.background) : ;; # don't know
  esac 2>&-
 fi
 # catch conversion errors
 [ -s "${preview}" ] && ln -sf "${preview}" "${PREVIEWIMG}" ||
  ln -sf "${IMAGE}" "${PREVIEWIMG}" # if all else failed this display JPG only
}
export -f swapimagefunc # bash

# Initialize preview widget with image of first chooser item.
# Note: chooser widget groups directories first, so we follow suit.
read IMAGE <<-EOF && [ "${IMAGE}" ] && swapimagefunc
`set +f; ls -d1 --group-directories-first /usr/share/backgrounds/* | head -n 1`
EOF

get_app_name_version()
{
  local version=$(awk -v FS="=" '
    /^VERSION=/ {
      gsub(/[\x22\x27]/,"", $2)
      print name, $2 # name and version
      exit
    }' "$APPDIR/functions")
    echo -n "${APPDIR##*/} ${version}"
}
export APP_NAME_VERSION=$(get_app_name_version)

#|# Debug: Emit pathname of current wallpaper preview file
#|dbg_get_current_preview()
#|{
#|  local prw="$(readlink -e "${PREVIEWIMG}")" # keep readlink !
#|  [ -n "${prw}" ] && echo -n "${prw}"
#|}
#|export -f dbg_get_current_preview # bash

# Emit status, image meta data and basename of chooser list view selection
status_bar_msg()
{
#|set +x
#|    echo >&2 "
#|-------------- status_bar_msg"
#|set -x
  local state meta topnm morfed img="${IMAGE}"
  [ -n "${img}" ] || return 0
  local prw="$(readlink -f "${PREVIEWIMG}")" # keep readlink -f !
  case "${prw}" in ${FOLDERPREVIEW}|${NOIMAGEPREVIEW}) img= ;; esac
  case "${img}" in
    *.jpg|*.jpeg|*.JPG|*.JPEG) topnm=jpegtopnm;;
    *.png|*.PNG) topnm=pngtopnm;;
    *.gif|*.GIF) topnm=giftopnm;;
    *.tif|*.tiff|*.TIF|*.TIFF) topnm=tifftopnm;;
    *.bmp|*.BMP) topnm=bmptopnm
      morfed=jpg # tell the code below, on 'Apply' BMP morfs into JPG
      ;;
    *.svg) topnm=svg_to_pnm
      morfed=jpg # tell the code below, on 'Apply' BMP morfs into JPG
      svg_to_pnm() { rsvg-convert "$@" | pngtopnm; }
      ;;
  esac
  if [ -n "${topnm}" ]; then
    # get image meta data
    meta=$(2>&- $topnm "${img}" | 2>&- pamtopam | awk '
      # decode pam header, refer man pam(5)
      /^ENDHDR/ {exit}
      NR>1 {h[$1]=$2}
      END {printf "%dx%d %s %dx%d bit\n", h["WIDTH"], h["HEIGHT"],\
            h["TUPLTYPE"], h["DEPTH"], log(1+h["MAXVAL"])/log(2)}
      ')
    case ${meta} in 0x0*) meta=${LOC_CORRUPTED_FILE} ;; esac
    # get state
    local cch mode cur fn x
    { read mode; read cur; } << EOF
    $(get_current_background)
EOF
    if [ -s "${STRETCHEDWPC}" ]; then
      read cch < "${STRETCHEDWPC}"
    else
      case "${mode}" in Stretch*) cch=${cur} ;; esac
    fi
    # mark state=cached if a stretched image of the selected item is cached
#|>&2 echo -e "prw:preview ${prw}\ncch:cached  ${cch}\ncur:current ${cur}\nimg:IMAGE   ${img}"
    fn=${prw%.jpg}
    [ -n "${morfed}" ] && fn="${fn%.*}.${morfed}"
    fn=${fn##*/}
    [ -f "${cch%/*}/$fn" -o -f "${cch%/*}/$fn.jpg" ] &&
      state="${LOC_CACHED}${state:+, }${state}"
    # mark state=mode if selection is the current background
    if [ -n "${cur}" ]; then
      case "${mode}" in
        Stretch*) [ "${cur##*/}" = "${img##*/}" ] ;; # can compare basename only
        *) [ "${cur}" = "${img}" ] ;;
      esac && x=$(get_loc_mode_label ${mode}) &&
      [ -n "$x" ] && state="${x%% *}${state:+, }${state}"
    fi
  else
    echo -n "${APP_NAME_VERSION}" # fallback
  fi
  echo -n "${state}${state:+; }${meta}${meta:+; }${img##*/}${morfed:+ (converted to $morfed)}"
#|set +x
}
export -f status_bar_msg # bash

#<window title=\"$LOC_MAIN\" icon-name=\"gtk-select-color\">
cd "$DIR" &&
export BG_DLG="
<window title=\"$LOC_MAIN\" image-name=\"$APPDIR/DirIcon16.png\">
 <vbox>
  <menubar>
   <menu>
    <menuitem stock=\"gtk-media-play\"label=\"$LOC_SLIDESHOW\">
     <action>'$APPDIR/slideshow' -start \"\$IMAGE\" &</action>
    </menuitem>
    <menuitem stock=\"gtk-preferences\"label=\"$LOC_OPTIONS\">
     <action>'$APPDIR/functions' -preferences &</action>
    </menuitem>
    <separator></separator>
    <menuitem stock=\"gtk-quit\"label=\"$LOC_QUIT\">
     <action>EXIT:abort</action>
    </menuitem>
    <label>$LOC_FILE</label>
   </menu>
   <menu>
    <menuitem stock=\"gtk-about\">
     <action>'$APPDIR/functions' -about</action>
    </menuitem>
    <label>$LOC_HELP</label>
   </menu>
  </menubar>
  <hbox>
   <vbox>
    <frame $LOC_FILE_FRAME>
     <chooser>
      <default>$DIR</default>
      <height>180</height><width>500</width>
      <variable>IMAGE</variable>
      <action when=\"update-preview\">swapimagefunc</action>
      <action when=\"update-preview\">refresh:PIXMAP</action>
      <action when=\"update-preview\">refresh:STATUSBAR</action>
      <action when=\"update-preview\">trigger_mode_button read \$LIVE</action>
      <action when=\"current-folder-changed\">IMAGE=/tmp swapimagefunc</action>
      <action when=\"current-folder-changed\">refresh:PIXMAP</action>
      <action when=\"current-folder-changed\">refresh:STATUSBAR</action>
      <action when=\"current-folder-changed\">trigger_mode_button read false</action>
     </chooser>
     <frame $LOC_CURRENT_IMAGE>
      <hbox height-request=\"190\" homogeneous=\"true\">
       <pixmap>
        <height>180</height><width>270</width>
        <variable>PIXMAP</variable>
        <input file>${PREVIEWIMG}</input>
       </pixmap>
      </hbox>
     </frame>
    </frame>
   </vbox>
   <vbox>
    <frame $LOC_MODE>
     <checkbox tooltip-text=\"${LOC_LIVE_TOOLTIP}\">
       <label>${LOC_LIVE}</label>
       <variable export=\"true\">LIVE</variable>
       <action>if true trigger_mode_button \"\$(get_mode_button)\" true</action>
     </checkbox>
     <frame>
       $RADIOBUTTONS
     </frame>
    </frame>
    <frame $LOC_ACTIONS>
     <button tooltip-text=\"${LOC_APPLY_TOOLTIP}\">
      <label>$LOC_APPLY</label>
      <input file stock=\"gtk-apply\"></input>
       <action>trigger_mode_button \"\$(get_mode_button)\" true</action>
      <action> 2>&- mv -f \"${USRDIR}/restore\" \"${USRDIR}/restore-not\"</action>
      <action>refresh:STATUSBAR</action>
      <action>which fixwidgets >&- 2>&- && fixwidgets -wallpaper_setter &</action>
     </button>
     <button tooltip-text=\"${LOC_CLEAR_TOOLTIP}\">
      <label>$LOC_CLEAR</label>
      <input file stock=\"gtk-clear\"></input>
      <action>'$APPDIR/slideshow' -stop</action>
      <action>'$APPDIR/set_bg' -clear</action>
      <action>refresh:STATUSBAR</action>
     </button>
     $SIDEBAR
     <button tooltip-text=\"${LOC_EDIT_TOOLTIP}\">
     <label>$LOC_EDIT</label>
      <input file stock=\"gtk-edit\"></input>
      <action>'$IMGEDITOR' \"\$IMAGE\" &</action>
     </button>
     <button height-request=\"30\" tooltip-text=\"${LOC_VIEW_TOOLTIP}\">
      <label>$LOC_VIEW</label>
      <input file>\"/usr/share/pixmaps/mini-icons/mini-eye.xpm\"</input>
      <action>'$VIEWER' \"\$IMAGE\" &</action>
     </button>
     <button tooltip-text=\"${LOC_FILER_TOOLTIP}\">
      <label>$LOC_FILER</label>
      <input file stock=\"gtk-directory\"></input>
      <action>dirname \"\$IMAGE\" > \"\${USRDIR}/bgdir\"</action>
      <action>'$APPDIR/functions' -filer</action>
     </button>
     <button tooltip-text=\"${LOC_CLOSE_TOOLTIP}\">
      <input file stock=\"gtk-close\"></input>
      <label>$LOC_CLOSE</label>
      <action condition=\"command_is_true(dialog_change_revert && echo true)\">EXIT:revert</action>
     </button>
    </frame>
   </vbox>
  </hbox>
  <statusbar has-resize-grip=\"false\">
   <variable>STATUSBAR</variable>
   <default>${APP_NAME_VERSION}</default>
   <input>status_bar_msg</input>
   <sensitive>true</sensitive>
  </statusbar>
 </vbox>
 <action signal=\"delete-event\">dialog_change_revert abort &</action>
 <action signal=\"hide\">exit:Exit</action>
</window>
"

# Prompt user about restoring initial background picture. Runs on exit/close/abort.
# If a slideshow did run let user choose between initial picture and last slide.
# If a slideshow is active show infobox and keep the show running in the bg.
dialog_change_revert()
{
#|set -x
#|: -------- dialog_change_revert $*
  # return 1 to stay in main window
  if ps | grep -q '[w]allslide'; then # sic [w]al...
    # On exit keep an active slideshow running - feature.
    # When it happens, the background can't revert to its initial picture.
    dialog_ok_cancel "${LOC_ACTIVE_SLIDESHOW}" || return 1 # back to main
    return 0 # no revert and exit app
  fi
  # Here the slideshow is inactive so the displayed background can revert
  # to a previous state.
  local goback=0
  local cwd=${PWD} # bash
  cd "${USRDIR}" &&
  # if the user did not 'Apply' changes
  if [ -f restore ]; then
    # and the user or slideshow changed the background
    if [ restore -ot bg_changed -o restore -ot pb_default ]; then
      case $1 in
        # if user clicked [x] in the title bar or app got signal
        abort) dialog_ok_cancel "${LOC_REVERT_ABORT}" no-cancel ;; # exit app
        # else user clicked 'Close' button (clean exit request)
        *)
          # If bg_changed is empty the slideshow did not run.
          # If bg_changed isn't empty it lists the last slide.
          if [ -s bg_changed ]; then # if a slideshow did run
            # prompt 1: either revert to X and exit or go back to main
            if dialog_ok_cancel \
              "${LOC_REVERT_SLIDESHOW} -- ${LOC_REVERT_CONFIRM_SLIDESHOW}"; then
              # user clicked 'ok' to exit
              # prompt 2: revert to either 'initial picture' or 'last slide'
              if ! dialog_ok_cancel "${LOC_REVERT_INITIAL_OR_LAST_SLIDE}" \
                "${LOC_REVERT_INITIAL}~~~${LOC_REVERT_LAST_SLIDE}"; then
                # user clicked 'last slide'
                cp bg_changed restore && sleep 1 && touch bg_changed
                # slept 1 because [ f1 -ot f2 ] minimum resolution = 1 second
                # revert to last slide and exit app
              else
                # user clicked 'initial picture' so no-op, which reverts to
                # the initial picture and exits
                : no-op
              fi
            else
              goback=1 # go back to main
            fi
          else # user clicked 'Close', there were changes but no slideshow
            # prompt 2: revert to 'initial picture' and exit or go back to main
            if ! dialog_ok_cancel \
              "${LOC_REVERT_CHANGES} -- ${LOC_REVERT_CONFIRM}"; then
              goback=1 # go back to main
            fi
            # else revert to initial picture and exit
          fi
      esac
    fi
  fi
  cd "${cwd}"
#|set +x
  return ${goback} # 0 exit app | 1 go back to main
}
export -f dialog_change_revert # bash

trap_with_arg()
{
  local sig func="$1"; shift
  for sig; do
    trap "${func} ${sig}" "${sig}"
  done
}

on_signal() # $1-received-signal
{
#|set +x
#|echo >&2 "
#|---------- on_signal $1"
#|set -x
  trap - HUP INT QUIT TERM ABRT 0
  local signal=$1 res=0 mode bg
  cd "${USRDIR}" &&
  # EXIT=revert is set in dialog_change_revert called by $BG_DLG
  # EXIT=abort is set by window [x] button and caught by signal=delete-event
  # signal INT is sent by terminal keyboard Ctrl+C (mostly debug)
  if [ revert = "${EXIT}" -o abort = "${EXIT}" -o "${signal}" = INT ]; then
    if [ -f restore ]; then
#|stat restore bg_changed >&2
      read mode bg < restore &&
      if [ restore -ot bg_changed -o restore -ot pb_default ]; then
          echo "${mode}" > backgroundmode &&
          DEBUG=${DEBUG:-} \
          SCALE_FILTER=${SCALE_FILTER:-hermite} \
          "${APPDIR}/set_bg" "${bg}" || res=1
      fi
    fi
  fi
  set +f
  rm -f backgroundmode bg_img bg_changed restore restore-not FILER VIEWER EDITOR \
    /tmp/$USER-wallpaper-radio-* /tmp/$USER-wallpaper-screen-*
  cd "${PREVDIR}"
  exit ${res}
}

trap_with_arg on_signal HUP INT QUIT TERM EXIT

eval $($GTKDIALOG --program BG_DLG)

